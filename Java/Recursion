
The process in which a function calls itself directly or indirectly is called recursion and the corresponding function is called a recursive function. Using a 
recursive algorithm, certain problems can be solved quite easily. Examples of such problems are Towers of Hanoi (TOH), Inorder/Preorder/Postorder Tree Traversals, DFS
of Graph, etc. 
 A recursive function solves a particular problem by calling a copy of itself and solving smaller subproblems of the original problems. Many more recursive calls can be
 generated as and when required. It is essential to know that we should provide a certain case in order to terminate this recursion process. So we can say that every 
 time the function calls itself with a simpler version of the original problem.
 
 NEED OF RECURSION:
 Recursion is an amazing technique with the help of which we can reduce the length of our code and make it easier to read and write. It has certain advantages over 
 the iteration technique which will be discussed later. A task that can be defined with its similar subtask, recursion is one of the best solutions for it.
 For example; The Factorial of a number.
 
 RECURSIVE PROGRAM FOR FIBONACCI NUMBER:
 
 // Java code to implement Fibonacci series
import java.util.*;

class GFG
{

// Function for fibonacci
static int fib(int n)
{
	// Stop condition
	if (n == 0)
		return 0;

	// Stop condition
	if (n == 1 || n == 2)
		return 1;

	// Recursion function
	else
		return (fib(n - 1) + fib(n - 2));
}

// Driver Code
public static void main(String []args)
{

	// Initialize variable n.
	int n = 5;
	System.out.print("Fibonacci series of 5 numbers is: ");

	// for loop to print the fibonacci series.
	for (int i = 0; i < n; i++)
	{
		System.out.print(fib(i)+" ");
	}
}
}

